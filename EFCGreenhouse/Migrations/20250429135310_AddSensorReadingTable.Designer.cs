// <auto-generated />
using System;
using EFCGreenhouse;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCGreenhouse.Migrations
{
    [DbContext(typeof(GreenhouseDbContext))]
    [Migration("20250429135310_AddSensorReadingTable")]
    partial class AddSensorReadingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ActionAlert", b =>
                {
                    b.Property<int>("TriggeredAlertsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TriggeringActionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TriggeredAlertsId", "TriggeringActionsId");

                    b.HasIndex("TriggeringActionsId");

                    b.ToTable("ActionAlert");
                });

            modelBuilder.Entity("AlertSensorReading", b =>
                {
                    b.Property<int>("TriggeredAlertsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TriggeringSensorReadingsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TriggeredAlertsId", "TriggeringSensorReadingsId");

                    b.HasIndex("TriggeringSensorReadingsId");

                    b.ToTable("AlertSensorReading");
                });

            modelBuilder.Entity("Domain.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControllerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("Domain.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Domain.Entities.Controller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Controller");
                });

            modelBuilder.Entity("Domain.Entities.Greenhouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlantType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Greenhouse");
                });

            modelBuilder.Entity("Domain.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrowthStage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlantingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("Domain.Entities.PredictionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PredictionTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SensorTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Suggestion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PredictionLogs");
                });

            modelBuilder.Entity("Domain.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("Domain.Entities.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PlantSensorReading", b =>
                {
                    b.Property<int>("AffectedPlantsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AffectingReadingsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AffectedPlantsId", "AffectingReadingsId");

                    b.HasIndex("AffectingReadingsId");

                    b.ToTable("PlantSensorReading");
                });

            modelBuilder.Entity("ActionAlert", b =>
                {
                    b.HasOne("Domain.Entities.Alert", null)
                        .WithMany()
                        .HasForeignKey("TriggeredAlertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Action", null)
                        .WithMany()
                        .HasForeignKey("TriggeringActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlertSensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Alert", null)
                        .WithMany()
                        .HasForeignKey("TriggeredAlertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SensorReading", null)
                        .WithMany()
                        .HasForeignKey("TriggeringSensorReadingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Action", b =>
                {
                    b.HasOne("Domain.Entities.Controller", "Controller")
                        .WithMany("Actions")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("Domain.Entities.Controller", b =>
                {
                    b.HasOne("Domain.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Controllers")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Domain.Entities.Greenhouse", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Plant", b =>
                {
                    b.HasOne("Domain.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Plants")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Domain.Entities.Sensor", b =>
                {
                    b.HasOne("Domain.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Sensors")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Domain.Entities.SensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Sensor", "Sensor")
                        .WithMany("Readings")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("PlantSensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Plant", null)
                        .WithMany()
                        .HasForeignKey("AffectedPlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SensorReading", null)
                        .WithMany()
                        .HasForeignKey("AffectingReadingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Controller", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("Domain.Entities.Greenhouse", b =>
                {
                    b.Navigation("Controllers");

                    b.Navigation("Plants");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Domain.Entities.Sensor", b =>
                {
                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
