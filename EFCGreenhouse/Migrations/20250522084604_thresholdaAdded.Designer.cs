// <auto-generated />
using System;
using EFCGreenhouse;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCGreenhouse.Migrations
{
    [DbContext(typeof(GreenhouseDbContext))]
    [Migration("20250522084604_thresholdaAdded")]
    partial class thresholdaAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlertActuatorAction", b =>
                {
                    b.Property<int>("ActuatorActionId")
                        .HasColumnType("integer");

                    b.Property<int>("AlertId")
                        .HasColumnType("integer");

                    b.HasKey("ActuatorActionId", "AlertId");

                    b.HasIndex("AlertId");

                    b.ToTable("AlertActuatorAction");
                });

            modelBuilder.Entity("AlertSensorReading", b =>
                {
                    b.Property<int>("AlertId")
                        .HasColumnType("integer");

                    b.Property<int>("SensorReadingId")
                        .HasColumnType("integer");

                    b.HasKey("AlertId", "SensorReadingId");

                    b.HasIndex("SensorReadingId");

                    b.ToTable("AlertSensorReading");
                });

            modelBuilder.Entity("Domain.Entities.Actuator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("ActuatorType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Actuators");

                    b.HasDiscriminator<string>("ActuatorType").HasValue("Actuator");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.ActuatorAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ActuatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ActuatorId");

                    b.ToTable("ActuatorActions");
                });

            modelBuilder.Entity("Domain.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Domain.Entities.Greenhouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("PlantType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Greenhouses");
                });

            modelBuilder.Entity("Domain.Entities.PredictionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("HoursUntilNextWatering")
                        .HasColumnType("double precision");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PredictionTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("PredictionLogs");
                });

            modelBuilder.Entity("Domain.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Domain.Entities.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SensorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("Domain.Entities.Threshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxValue")
                        .HasColumnType("double precision");

                    b.Property<double>("MinValue")
                        .HasColumnType("double precision");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("integer");

                    b.Property<string>("GrowthStage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PlantingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("PlantSensorReading", b =>
                {
                    b.Property<int>("AffectedPlantsId")
                        .HasColumnType("integer");

                    b.Property<int>("AffectingReadingsId")
                        .HasColumnType("integer");

                    b.HasKey("AffectedPlantsId", "AffectingReadingsId");

                    b.HasIndex("AffectingReadingsId");

                    b.ToTable("PlantSensorReading");
                });

            modelBuilder.Entity("Domain.Entities.Actuators.ServoMotorActuator", b =>
                {
                    b.HasBaseType("Domain.Entities.Actuator");

                    b.HasDiscriminator().HasValue("servomotor");
                });

            modelBuilder.Entity("Domain.Entities.WaterPumpActuator", b =>
                {
                    b.HasBaseType("Domain.Entities.Actuator");

                    b.HasDiscriminator().HasValue("WaterPump");
                });

            modelBuilder.Entity("AlertActuatorAction", b =>
                {
                    b.HasOne("Domain.Entities.ActuatorAction", null)
                        .WithMany()
                        .HasForeignKey("ActuatorActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Alert", null)
                        .WithMany()
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlertSensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Alert", null)
                        .WithMany()
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SensorReading", null)
                        .WithMany()
                        .HasForeignKey("SensorReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Actuator", b =>
                {
                    b.HasOne("Domain.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Actuators")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Domain.Entities.ActuatorAction", b =>
                {
                    b.HasOne("Domain.Entities.Actuator", "Actuator")
                        .WithMany("Actions")
                        .HasForeignKey("ActuatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actuator");
                });

            modelBuilder.Entity("Domain.Entities.Greenhouse", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Greenhouses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PredictionLog", b =>
                {
                    b.HasOne("Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Domain.Entities.Sensor", b =>
                {
                    b.HasOne("Domain.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Sensors")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Domain.Entities.SensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Sensor", "Sensor")
                        .WithMany("Readings")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Domain.Entities.Threshold", b =>
                {
                    b.HasOne("Domain.Entities.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Plant", b =>
                {
                    b.HasOne("Domain.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Plants")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("PlantSensorReading", b =>
                {
                    b.HasOne("Plant", null)
                        .WithMany()
                        .HasForeignKey("AffectedPlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SensorReading", null)
                        .WithMany()
                        .HasForeignKey("AffectingReadingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Actuator", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("Domain.Entities.Greenhouse", b =>
                {
                    b.Navigation("Actuators");

                    b.Navigation("Plants");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Domain.Entities.Sensor", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Greenhouses");
                });
#pragma warning restore 612, 618
        }
    }
}
